################################################################################
# Creality K2 macros for better ORCA Sliser compatibility and other improvements
# Based on ideas: https://github.com/jamincollins great thanks!
# GPL-3.0 license 
# Author: Mikhail Ivanov masluf@gmail.com

[respond]

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[extruder]
min_extrude_temp: 0

[save_variables]
filename: ./mnt/UDISK/printer_data/config/custom/custom_vars.cfg

[gcode_macro PRINTER_PARAM]
# variable_dbg: 1
# variable_custom_toolchange: 1

# BOX_NOZZLE_CLEAN
# BOX_CUT_MATERIAL
# BOX_EXTRUDE_MATERIAL TNN=T1A
# BOX_EXTRUDER_EXTRUDE TNN=T1A
# BOX_MATERIAL_FLUSH LEN=100 VELOCITY=360 TEMP=220
# BOX_RETRUDE_MATERIAL_WITH_TNN TNN=T1A
# BOX_QUIT_MATERIAL

[delayed_gcode INIT_VARS_CFG]
initial_duration: 10
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if svv.tool is not defined %}
        SAVE_VARIABLE VARIABLE=tool VALUE=-1
        SAVE_VARIABLE VARIABLE=temp VALUE=-1
        SAVE_VARIABLE VARIABLE=velocity VALUE=-1 # (max_flowrate / 2.4) * 60
        SAVE_VARIABLE VARIABLE=filament_type VALUE=''
    {% endif %}

[gcode_macro _PURGE_AND_CLEAN]
gcode:
    {% set temp = params.TEMP|default(240)|int %}
    {% set velocity = params.VELOCITY|default(60)|float %}
    SAVE_GCODE_STATE NAME=purgeandclean
    BOX_GO_TO_EXTRUDE_POS
    # BOX_MATERIAL_FLUSH LEN=50 VELOCITY={velocity} TEMP={temp}
    RESPOND MSG="Purge temp:{temp} velocity:{velocity * 0.7}"
    M109 S{temp}
    M83
    # G91
    G1 E60 F{velocity * 0.7} 
    _GO_CLEAN
    # BOX_NOZZLE_CLEAN
    RESTORE_GCODE_STATE NAME=purgeandclean

[gcode_macro _PURGE_AND_GO]
gcode:
    {% set temp = params.TEMP|default(240)|int %}
    {% set velocity = params.VELOCITY|default(60)|float %}
    SAVE_GCODE_STATE NAME=purgeandgo
    BOX_GO_TO_EXTRUDE_POS
    # BOX_MATERIAL_FLUSH LEN=50 VELOCITY={velocity} TEMP={temp}
    RESPOND MSG="Purge temp:{temp} velocity:{velocity * 0.7}"
    M109 S{temp}
    M83
    # G91
    G1 E60 F{velocity * 0.7} 
    _GO_TO_PLATE
    # BOX_NOZZLE_CLEAN
    RESTORE_GCODE_STATE NAME=purgeandgo

[gcode_macro _GO_CLEAN]
gcode:
    # SAVE_GCODE_STATE NAME=goclean
    G91
    G1 X32 F14000
    G1 X-32 
    G1 X32
    G1 X-32 
    G1 X32
    G1 X-32
    G90
    # RESTORE_GCODE_STATE NAME=goclean
    
[gcode_macro _GO_TO_PLATE]
gcode:
    # SAVE_GCODE_STATE NAME=gotoplate
    G91
    G1 X19 F14000
    # G1 X-19 
    # G1 X19 
    # G1 X-19 
    # G1 X19 
    # G1 X-19 
    # G1 X19 

    # G1 Y-4 
    # G1 Y6 
    # G1 Y-6 
    # G1 Y6 
    # G1 Y-6 
    # G1 Y6 
    # G1 Y-6 
    # G1 Y6 
    G90
    # RESTORE_GCODE_STATE NAME=gotoplate

# T[initial_no_support_extruder] TEMP=[first_layer_temperature] MAX_FLOWRATE=[filament_max_volumetric_speed]  FILAMENT_TYPE=[filament_type]
[gcode_macro TOOLCHANGE]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    SAVE_GCODE_STATE NAME=myMoveState
    {% set svv = printer.save_variables.variables %}

    {% set prev_tool = svv.tool %}
    {% set prev_temp = svv.temp %}
    {% set prev_addr = svv.addr %}
    {% set prev_num = svv.num %}
    {% set prev_velocity = svv.velocity %}
    {% set prev_filament_type = svv.filament_type %}

    RESPOND MSG="prev_tool: {prev_tool}, prev_temp: {prev_temp}, prev_velocity: {prev_velocity}, prev_filament_type: {prev_filament_type}"

    {% set tool = params.TOOL|default(0)|int %}
    {% set temp = params.TEMP|default(240)|int %}
    {% set velocity = params.MAX_FLOWRATE|default(2.0)|float %}
    {% set velocity = (velocity / 2.4) * 60 %}
    {% set filament_type = params.FILAMENT_TYPE|default("PLA")|string %}

    RESPOND MSG="tool: {tool}, temp: {temp}, velocity: {velocity}, filament_type: {filament_type}"

    # {% set tt = params.TOOL|default(0)|string %}
    
    {% set box1 = printer['box'].T1['state'] %}
    {% set box2 = printer['box'].T2['state'] %}
    {% set box3 = printer['box'].T3['state'] %}
    {% set box4 = printer['box'].T4['state'] %}
    {% set connected_box_count = 0 %}

    {% if box4 == 'connect' %}
        {% set connected_box_count = 4 %}
    {% elif box3 == 'connect' %}
        {% set connected_box_count = 3 %}
    {% elif box2 == 'connect' %}
        {% set connected_box_count = 2 %}
    {% elif box1 == 'connect' %}
        {% set connected_box_count = 1 %}
    {% endif %}

    {% set maped_tool = 'T' %}
    {% set ADDR = 1 %}
    {% set NUM = 'A' %}

    #     maped_tool += ((tool|3)>>2)+1;
    {% if tool < 4 %}
        {% set maped_tool = maped_tool+'1' %}
    {% elif tool < 8 %}
        {% set maped_tool = maped_tool+'2' %}
        {% set ADDR = 2 %}
    {% elif tool < 12 %}
        {% set maped_tool = maped_tool+'3' %}
        {% set ADDR = 3 %}
    {% else %}
        {% set maped_tool = maped_tool+'4' %}
        {% set ADDR = 4 %}
    {% endif %}

    {% if tool % 4 == 0 %}
        {% set maped_tool = maped_tool+'A' %}
    {% elif tool % 4 == 1 %}
        {% set maped_tool = maped_tool+'B' %}
        {% set NUM = 'B' %}
    {% elif tool % 4 == 2 %}
        {% set maped_tool = maped_tool+'C' %}
        {% set NUM = 'C' %}
    {% else %}
        {% set maped_tool = maped_tool+'D' %}
        {% set NUM = 'D' %}
    {% endif %}

    RESPOND MSG="tool: {tool}, prevTool: {prev_tool}, maped_tool: {maped_tool}, boxCount: {connected_box_count}"

    {% if tool == 17 %}
        T17
    {% else %}
    # Spoolholder process
        {% if (connected_box_count == 4 and tool == 16) or (connected_box_count == 2 and tool >= 12) or (connected_box_count == 2 and tool >= 8) or (connected_box_count == 1 and tool >= 4) %}
            RESPOND MSG="Spoolholder process"
            {% if printer['filament_switch_sensor filament_sensor'].filament_detected == True and (prev_tool == tool or prev_tool == -1) %}
                RESPOND MSG="Start print from Spoolholder"
                BOX_ENABLE_CFS_PRINT ENABLE=0
                # extra purge for different filament
                {% if prev_temp != temp or prev_filament_type != filament_type %}
                    _PURGE_AND_CLEAN VELOCITY={velocity} TEMP={temp}
                    _PURGE_AND_CLEAN VELOCITY={velocity} TEMP={temp}
                {% endif %}
                # purge
                _PURGE_AND_GO VELOCITY={velocity} TEMP={temp}
                SAVE_VARIABLE VARIABLE=tool VALUE={tool}
                SAVE_VARIABLE VARIABLE=temp VALUE={temp}
                SAVE_VARIABLE VARIABLE=addr VALUE={ADDR}
                SAVE_VARIABLE VARIABLE=num VALUE='"{NUM}"'
                SAVE_VARIABLE VARIABLE=velocity VALUE={velocity} 
                SAVE_VARIABLE VARIABLE=filament_type VALUE='"{filament_type}"'
            {% elif printer['filament_switch_sensor filament_sensor'].filament_detected == True and prev_tool < connected_box_count * 4 %}
                RESPOND MSG="CFS Tool in toolhead but you try print from spoolholder. Retrude CFS Tool, load spoolholder filament and restart print"
                # Cut previous filament
                BOX_CUT_MATERIAL
                BOX_GO_TO_EXTRUDE_POS
                # unload
                BOX_RETRUDE_MATERIAL
                CANCEL_PRINT
            {% else %}
                RESPOND MSG="Toolhead is empty, and you try print from spoolholder. Load spoolholder filament and restart print"
                CANCEL_PRINT
            {% endif %}
    # CFS Process
        {% else %}
            RESPOND MSG="CFS process"
        #     # {% if printer['filament_switch_sensor filament_sensor'].filament_detected == True and (prev_tool == tool or prev_tool == -1) %}
        #     # {% set tt = tt+".1" %}
        #     #TODO: REplace TT with custom process
        #     # T{tt} {rawparams}
        #     # SAVE_VARIABLE VARIABLE=tool VALUE={tool}
        #     ###################################################################
        # Use same tool again
            {% if printer['filament_switch_sensor filament_sensor'].filament_detected == True and prev_tool == tool %}
                RESPOND MSG="CFS Ready to print {maped_tool}"
                BOX_SET_BOX_MODE ADDR={ADDR} MODE='PRINT' NUM={NUM}
                # purge
                _PURGE_AND_GO VELOCITY={velocity} TEMP={temp}
                SAVE_VARIABLE VARIABLE=tool VALUE={tool}
                SAVE_VARIABLE VARIABLE=temp VALUE={temp}
                SAVE_VARIABLE VARIABLE=addr VALUE={ADDR}
                SAVE_VARIABLE VARIABLE=num VALUE='"{NUM}"'
                SAVE_VARIABLE VARIABLE=velocity VALUE={velocity} 
                SAVE_VARIABLE VARIABLE=filament_type VALUE='"{filament_type}"'
                # Start printing
        # Use another tool from CFS, but Spoolholder tool inserted
            {% elif printer['filament_switch_sensor filament_sensor'].filament_detected == True and (prev_tool >= connected_box_count*4) %}
                RESPOND MSG="Spoolholder Tool in toolhead but you try print from CFS. Retrude spoolholder Tool and restart print"
                # Cut previous filament
                BOX_MOVE_TO_CUT
                BOX_GO_TO_EXTRUDE_POS
                # BOX_CUT_MATERIAL
                # unload
                G91
                G1 E-25 F{prev_velocity}
                M400
                G90
                # BOX_RETRUDE_MATERIAL
                BOX_SET_BOX_MODE ADDR={prev_addr} MODE="IDLE"
                BOX_RETRUDE_PROCESS ADDR={prev_addr} NUM={prev_num} TRIGGER="BUFFER"
                BOX_RETRUDE_PROCESS ADDR={prev_addr} NUM={prev_num} TRIGGER="MATERIAL"
                CANCEL_PRINT
        # Use another tool from CFS
            {% elif printer['filament_switch_sensor filament_sensor'].filament_detected == True and (prev_tool != tool and prev_tool != -1) %}
                RESPOND MSG="CFS Toolchange, tool: {tool}, prevTool: {prev_tool}"
                # Cut previous filament
                # BOX_CUT_MATERIAL
                BOX_MOVE_TO_CUT
                BOX_GO_TO_EXTRUDE_POS
                # unload
                G91
                G1 E-25 F{prev_velocity}
                M400
                G90
                # BOX_RETRUDE_MATERIAL
                ##--------------------------------
                BOX_SET_BOX_MODE ADDR={prev_addr} MODE="IDLE"
                BOX_RETRUDE_PROCESS ADDR={prev_addr} NUM={prev_num} TRIGGER="BUFFER"
                BOX_RETRUDE_PROCESS ADDR={prev_addr} NUM={prev_num} TRIGGER="MATERIAL"
                ##------------------------------
                # load
                BOX_EXTRUDE_MATERIAL TNN={maped_tool}
                SAVE_VARIABLE VARIABLE=tool VALUE={tool}
                SAVE_VARIABLE VARIABLE=temp VALUE={temp}
                SAVE_VARIABLE VARIABLE=addr VALUE={ADDR}
                SAVE_VARIABLE VARIABLE=num VALUE='"{NUM}"'
                SAVE_VARIABLE VARIABLE=velocity VALUE={velocity} 
                SAVE_VARIABLE VARIABLE=filament_type VALUE='"{filament_type}"'
                # Purge Old
                _PURGE_AND_CLEAN VELOCITY={velocity} TEMP={prev_temp}
                _PURGE_AND_CLEAN VELOCITY={velocity} TEMP={temp}
                # Purge new
                _PURGE_AND_GO VELOCITY={velocity} TEMP={temp}
                # Start printing
        # Old tool retruded and new tool need to be loading
            {% elif printer['filament_switch_sensor filament_sensor'].filament_detected == False and (prev_tool != tool and prev_tool != -1) %}
                RESPOND MSG="CFS Toolchange, tool: {tool}, prevTool: {prev_tool}"
                # load
                BOX_EXTRUDE_MATERIAL TNN={maped_tool}
                # Purge new
                _PURGE_AND_CLEAN VELOCITY={velocity} TEMP={temp}
                _PURGE_AND_GO VELOCITY={velocity} TEMP={temp}
                #save tools
                SAVE_VARIABLE VARIABLE=tool VALUE={tool}
                SAVE_VARIABLE VARIABLE=temp VALUE={temp}
                SAVE_VARIABLE VARIABLE=addr VALUE={ADDR}
                SAVE_VARIABLE VARIABLE=num VALUE='"{NUM}"'
                SAVE_VARIABLE VARIABLE=velocity VALUE={velocity} 
                SAVE_VARIABLE VARIABLE=filament_type VALUE='"{filament_type}"'
        # Old tool retruded and same tool need to be loading
            {% elif printer['filament_switch_sensor filament_sensor'].filament_detected == False and (prev_tool == tool) %}
                RESPOND MSG="Toolhead is empty and same tool selected  {maped_tool}"
                # load
                BOX_EXTRUDE_MATERIAL TNN={maped_tool}
                # Purge new
                _PURGE_AND_GO VELOCITY={velocity} TEMP={temp}
                #save tools
                SAVE_VARIABLE VARIABLE=tool VALUE={tool}
                SAVE_VARIABLE VARIABLE=temp VALUE={temp}
                SAVE_VARIABLE VARIABLE=addr VALUE={ADDR}
                SAVE_VARIABLE VARIABLE=num VALUE='"{NUM}"'
                SAVE_VARIABLE VARIABLE=velocity VALUE={velocity} 
                SAVE_VARIABLE VARIABLE=filament_type VALUE='"{filament_type}"'
                # Start printing
        # Use new tool or first time use
            {% elif printer['filament_switch_sensor filament_sensor'].filament_detected == False and prev_tool == -1 %}
                RESPOND MSG="Toolhead is empty, start prepare  {maped_tool}"
                # load
                BOX_EXTRUDE_MATERIAL TNN={maped_tool}
                # Purge new
                _PURGE_AND_GO VELOCITY={velocity} TEMP={temp}
                #save tools
                SAVE_VARIABLE VARIABLE=tool VALUE={tool}
                SAVE_VARIABLE VARIABLE=temp VALUE={temp}
                SAVE_VARIABLE VARIABLE=addr VALUE={ADDR}
                SAVE_VARIABLE VARIABLE=num VALUE='"{NUM}"'
                SAVE_VARIABLE VARIABLE=velocity VALUE={velocity} 
                SAVE_VARIABLE VARIABLE=filament_type VALUE='"{filament_type}"'
                # Start printing
            {% endif %}
        ###################################
        {% endif %}
    {% endif %}
    RESTORE_GCODE_STATE NAME=myMoveState
    # SAVE_VARIABLE VARIABLE=tool VALUE={tool}
    # SAVE_VARIABLE VARIABLE=temp VALUE={temp}
    # SAVE_VARIABLE VARIABLE=velocity VALUE={velocity} 
    # SAVE_VARIABLE VARIABLE=filament_type VALUE={filament_type}


    # {% set svv = printer.save_variables.variables %}
    # {% set temp = svv.temp %}
    # {% set flowrate = svv.flowrate %}
    # {% set flush_len = svv.flush_len %}
    # {% set tt = tool+".1" %}
    # RESPOND MSG="tool: {tool}, boxCount: {connected_box_count}, temp: {temp}, flowrate: {flowrate}, flush_len:{flush_len}, tt:{tt}"
    # T{tt}

[gcode_macro T17]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set tool = svv.tool %}

    {% set box1 = printer['box'].T1['state'] %}
    {% set box2 = printer['box'].T2['state'] %}
    {% set box3 = printer['box'].T3['state'] %}
    {% set box4 = printer['box'].T4['state'] %}
    {% set connected_box_count = 0 %}

    {% if box4 == 'connect' %}
        {% set connected_box_count = 4 %}
    {% elif box3 == 'connect' %}
        {% set connected_box_count = 3 %}
    {% elif box2 == 'connect' %}
        {% set connected_box_count = 2 %}
    {% elif box1 == 'connect' %}
        {% set connected_box_count = 1 %}
    {% endif %}

    {% if printer['filament_switch_sensor filament_sensor'].filament_detected == True %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28
        {% endif %}
        SAVE_GCODE_STATE NAME=myMoveState
        BOX_MOVE_TO_CUT
        #M400
        BOX_GO_TO_EXTRUDE_POS
        M400
        G91
        G0 E-15 F360
        G90
        M400
        {% if (connected_box_count == 4 and tool < 16) or (connected_box_count == 2 and tool < 12) or (connected_box_count == 2 and tool < 8) or (connected_box_count == 1 and tool < 4) %}
            RESPOND MSG="CFS Tool in toolhead, retrude"
            # BOX_RETRUDE_PROCESS ADDR=1234 NUM='ABCD' TRIGGER='MATERIAL'
            BOX_RETRUDE_MATERIAL
            TURN_OFF_HEATERS
        {% endif %}
        BOX_NOZZLE_CLEAN
        # SAVE_VARIABLE VARIABLE=tool VALUE=-1
        RESTORE_GCODE_STATE NAME=myMoveState
    {% else %}
        RESPOND MSG="Toolhead is empty"
    {% endif %}


# [gcode_macro START_PRINT]
# rename_existing: START_PRINT_BASE
# gcode:
    # {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    # SAVE_VARIABLE VARIABLE=temp VALUE={EXTRUDER_TEMP}
    # START_PRINT_BASE {rawparams}


[gcode_macro END_PRINT]
gcode:
    # END_PRINT_BASE
    RESTORE_LIMITS
    M400
    G92 E0
    # BOX_END 
    # BOX_END_PRINT
    Qmode_exit
    EXCLUDE_OBJECT_RESET
    PRINT_PREPARE_CLEAR
    M220 S100
    SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000
      # TURN_OFF_HEATERS
    {% if printer["output_pin DO_NOT_TURN_OFF_BED"].value|int == 1 %}
        M104 S0 #EXTRUDER
    {% else %}
        M140 S0 #BED
        M104 S0 #EXTRUDER
    {% endif%}
    # M107 P1
    M107 P2
    END_PRINT_POINT
    WAIT_TEMP_START
    M106 P0 S127
    # M141 S0
    SET_PIN PIN=extruder_fan VALUE=0
    BOX_NOZZLE_CLEAN

[gcode_macro T0]
rename_existing: T0.1
gcode:
    TOOLCHANGE TOOL=0 {rawparams}

[gcode_macro T1]
rename_existing: T1.1
gcode:
    TOOLCHANGE TOOL=1 {rawparams}

[gcode_macro T2]
rename_existing: T2.1
gcode:
    TOOLCHANGE TOOL=2 {rawparams}

[gcode_macro T3]
rename_existing: T3.1
gcode:
    TOOLCHANGE TOOL=3 {rawparams}

[gcode_macro T4]
rename_existing: T4.1
gcode:
    TOOLCHANGE TOOL=4 {rawparams}

[gcode_macro T5]
rename_existing: T5.1
gcode:
    TOOLCHANGE TOOL=5 {rawparams}

[gcode_macro T6]
rename_existing: T6.1
gcode:
    TOOLCHANGE TOOL=6 {rawparams}

[gcode_macro T7]
rename_existing: T7.1
gcode:
    TOOLCHANGE TOOL=7 {rawparams}

[gcode_macro T8]
rename_existing: T8.1
gcode:
    TOOLCHANGE TOOL=8 {rawparams}

[gcode_macro T9]
rename_existing: T9.1 
gcode:
    TOOLCHANGE TOOL=9 {rawparams}

[gcode_macro T10]
rename_existing: T10.1
gcode:
    TOOLCHANGE TOOL=10 {rawparams}

[gcode_macro T11]
rename_existing: T11.1
gcode:
    TOOLCHANGE TOOL=11 {rawparams}

[gcode_macro T12]
rename_existing: T12.1
gcode:
    TOOLCHANGE TOOL=12 {rawparams}

[gcode_macro T13]
rename_existing: T13.1
gcode:
    TOOLCHANGE TOOL=13 {rawparams}

[gcode_macro T14]
rename_existing: T14.1
gcode:
    TOOLCHANGE TOOL=14 {rawparams}

[gcode_macro T15]
rename_existing: T15.1
gcode:
    TOOLCHANGE TOOL=15 {rawparams}

[gcode_macro T16]
gcode:
    TOOLCHANGE TOOL=16 {rawparams}